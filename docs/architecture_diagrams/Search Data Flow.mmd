
// Tuxedo Link - Search Data Flow

user [icon: user]

// Step 1: User Input
user_input [label: "1. User Input\n'friendly playful cat\nin NYC'"]

// Step 2: Profile Extraction
profile_extraction [label: "2. Profile Agent\n(OpenAI GPT-4)", icon: chat, color: purple]
extracted_profile [label: "CatProfile\n- location: NYC\n- age: young\n- personality: friendly"]

// Step 3: API Fetching (Parallel)
api_fetch [label: "3. Fetch from APIs\n(Parallel)", icon: api, color: blue]
petfinder_results [label: "Petfinder\n50 cats"]
rescuegroups_results [label: "RescueGroups\n50 cats"]

// Step 4: Deduplication
dedup [label: "4. Deduplication\n(3-tier)", icon: filter, color: orange]
dedup_details [label: "- Fingerprint\n- Text similarity\n- Image similarity"]

// Step 5: Cache & Embed
cache [label: "5. Cache & Embed", icon: database, color: gray]
sqlite_cache [label: "SQLite\n(Cat data)"]
vector_store [label: "ChromaDB\n(Embeddings)"]

// Step 6: Hybrid Matching
matching [label: "6. Hybrid Search\n60% vector\n40% metadata", icon: search, color: green]

// Step 7: Results
results [label: "7. Ranked Results\nTop 20 matches"]

// Step 8: Display
display [label: "8. Display to User\nwith explanations", icon: browser, color: purple]

// Flow connections
user > user_input
user_input > profile_extraction
profile_extraction > extracted_profile
extracted_profile > api_fetch

api_fetch > petfinder_results
api_fetch > rescuegroups_results

petfinder_results > dedup
rescuegroups_results > dedup
dedup > dedup_details

dedup > cache
cache > sqlite_cache
cache > vector_store

sqlite_cache > matching
vector_store > matching

matching > results
results > display
display > user